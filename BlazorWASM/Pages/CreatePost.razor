@page "/CreatePost"
@using HttpClients.ClientInterfaces
@using Domain.Models
@using Domain.DTOs
@using UIComponents
@using System.Security.Claims
@inject IUserService userService
@inject IPostService postService
@inject NavigationManager navMgr
@attribute [Authorize]

<div class="card">
    <h3>Create Post</h3>
    <div class="form-group field">
        <label>Title:</label>
        <input type="text" @bind="postTitle"/>
    </div>
    <div class="form-group field">
        <label>Description:</label>
        <input type="text" @bind="postDescription"/>
    </div>
    <div class="button-row">
        @if (!string.IsNullOrEmpty(msg))
        {
            <label style="color: red">@msg</label>
        }
        <button @onclick="Create" class="acceptbtn">Create</button>
    </div>
</div>

<Modal ShowModal="showModal">
    <p>You have successfully added a new Post item. You should be very proud of yourself!</p>
    <button @onclick="@Proceed">Wonderful</button>
</Modal>

@code {
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    
    private IEnumerable<Claim>? userClaims;
    private int userId;
    
    private IEnumerable<User>? users;
    private int? selectedUserId;
    private string postTitle = "";
    private string postDescription = "";

    private string msg = "";

    private bool showModal;

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;

        userClaims = user.Claims;
        Claim userIdC = userClaims.First(claim => claim.Type.Equals("id"));
        userId = Int32.Parse(userIdC.Value);
    }

    private async Task Create()
    {
        msg = "";

        if (string.IsNullOrEmpty(postTitle))
        {
            msg = "Title cannot be empty!";
            return;
        }
        
        if (string.IsNullOrEmpty(postDescription))
        {
            msg = "Description cannot be empty!";
            return;
        }

        try
        {
            PostCreationDto dto = new(userId, postTitle, postDescription)  ;
            await postService.CreateAsync(dto);
            showModal = true;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private void Proceed()
    {
        showModal = false;
        navMgr.NavigateTo("/ViewPosts");
    }

}